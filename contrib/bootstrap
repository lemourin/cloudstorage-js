#!/usr/bin/env bash

export ARCH=emscripten
export INSTALL_PATH=$PWD/$ARCH
export PKG_CONFIG_LIBDIR=$INSTALL_PATH/lib/pkgconfig
export CMAKE_PREFIX_PATH=$INSTALL_PATH
export PATH=$INSTALL_PATH/bin:$PATH
CONCURRENCY=4

export CXXFLAGS="-Oz"
export CFLAGS="$CXXFLAGS"

set -e

command -v libtoolize >/dev/null 2>&1 || { echo >&2 "libtool is not installed"; exit 1; }
command -v automake >/dev/null 2>&1 || { echo >&2 "automake is not installed"; exit 1; }

unpack() {
  if [[ ! -d $1 ]]; then
    tar xf $1.$2
    if [[ $? -ne 0 ]]; then
      echo "Couldn't extract $1.$2"
      exit 1
    fi
    cd $1
  else
    cd $1
  fi
}

fetch() {
  EXT=${2##*.}
  if [[ ! -f $2 ]]; then
    DEST=$(tempfile)
    wget $1 -O $DEST
    if [[ $? -ne 0 ]]; then
      echo "Couldn't fetch $1"
      exit 1
    else
      mv $DEST $2
    fi
  fi
  unpack `basename $2 .tar.$EXT` tar.$EXT
}

fetch_url() {
  fetch $1 ${1##*/}
}

fetch_github() {
  TARBALL=${1##*/}
  REPO_URL=${1%%/archive/*}
  REPO_NAME=${REPO_URL##*/}
  NAME=${TARBALL##v}
  fetch $1 $REPO_NAME-$NAME
}

run_make() {
  emmake make -j $CONCURRENCY && emmake make install
}

fetch_jsoncpp() {
  fetch_github https://github.com/open-source-parsers/jsoncpp/archive/$1.tar.gz
}

install_jsoncpp() {
  mkdir -p build
  cd build
  emcmake cmake .. \
    -DCMAKE_INSTALL_PREFIX=$INSTALL_PATH -DBUILD_SHARED_LIBS=0 -DJSONCPP_WITH_TESTS=0 \
    -DCMAKE_CXX_FLAGS=$CXXFLAGS
  run_make
}

fetch_tinyxml2() {
  fetch_github https://github.com/leethomason/tinyxml2/archive/$1.tar.gz
}

install_tinyxml2() {
  mkdir -p build
  cd build
  emcmake cmake .. \
    -DCMAKE_INSTALL_PREFIX=$INSTALL_PATH -DBUILD_SHARED_LIBS=0 -DBUILD_STATIC_LIBS=1 \
    -DCMAKE_CROSS_COMPILING=1 \
    -DCMAKE_CXX_FLAGS=$CXXFLAGS
  run_make
}

fetch_cryptopp() {
  VERSION=${1//./_}
  fetch_github https://github.com/weidai11/cryptopp/archive/CRYPTOPP_$VERSION.tar.gz
}

install_cryptopp() {
  sed -i -E 's/#\s*define\s*CRYPTOPP_CXX11_ATOMICS\s*1//g' config.h &&
  sed -i -E 's/CXXFLAGS\s*\+=\s*\-pthread//g' GNUMakefile &&
  emmake make -j $CONCURRENCY static -f GNUMakefile &&
  emmake make -j $CONCURRENCY install PREFIX=$INSTALL_PATH -f GNUMakefile
}

fetch_sqlite() {
  fetch_url https://www.sqlite.org/2018/sqlite-autoconf-$1.tar.gz
}

install_sqlite() {
  emconfigure ./configure --prefix=$INSTALL_PATH --enable-static --disable-shared LDFLAGS="-s ERROR_ON_UNDEFINED_SYMBOLS=0"
  run_make
}

fetch_openssl() {
  fetch_url https://www.openssl.org/source/openssl-$1.tar.gz
}

install_openssl() {
  emconfigure ./Configure --prefix=$INSTALL_PATH  --openssldir=$INSTALL_PATH/openssl -D__STDC_NO_ATOMICS__ \
    no-ssl3 no-comp no-hw no-engine no-dso no-asm linux-generic32 no-shared no-tests
  sed -i -E "s/^CROSS_COMPILE=.*$/CROSS_COMPILE=/" Makefile
  run_make
}

fetch_curl() {
  fetch_url https://github.com/curl/curl/releases/download/curl-${1//./_}/curl-$1.tar.gz
}

install_curl() {
  emconfigure ./configure --prefix=$INSTALL_PATH --enable-static --disable-shared --with-ssl --without-libpsl LDFLAGS="-s ERROR_ON_UNDEFINED_SYMBOLS=0" &&
  cd lib && run_make && cd .. && cp -r include/curl $INSTALL_PATH/include
}

fetch_cares() {
  VERSION=${1//./_}
  fetch_github https://github.com/c-ares/c-ares/archive/cares-$VERSION.tar.gz
}

install_cares() {
  mkdir -p build && cd build && \
  CFLAGS="${CFLAGS} -DHAVE_RECV -DHAVE_RECVFROM -DHAVE_SEND" \
  LDFLAGS="-s ERROR_ON_UNDEFINED_SYMBOLS=0" emcmake cmake -DBUILD_SHARED_LIBS=0 -DCMAKE_INSTALL_PREFIX=$INSTALL_PATH .. &&
  run_make
}

fetch_megasdk() {
  fetch_github https://github.com/meganz/sdk/archive/v$1.tar.gz
}

install_megasdk() {
  sed -i "s/m_clock_getmonotonictime(\&ts)/clock_gettime(CLOCK_MONOTONIC, \&ts)/g" src/posix/waiter.cpp
  ./autogen.sh
  emconfigure ./configure --prefix=$INSTALL_PATH \
    --without-freeimage \
    --without-zlib \
    --disable-examples \
    --disable-shared \
    --enable-static \
    --with-cryptopp=$INSTALL_PATH \
    --with-openssl=$INSTALL_PATH \
    --with-cares=$INSTALL_PATH \
    --with-sqlite=$INSTALL_PATH \
    --with-curl=$INSTALL_PATH \
    --disable-curl-checks \
    LDFLAGS="-s ERROR_ON_UNDEFINED_SYMBOLS=0" \
    CXXFLAGS=-std=c++14
  run_make
}

fetch_libcloudstorage() {
  fetch_github https://github.com/lemourin/libcloudstorage/archive/$1.tar.gz
}

install_libcloudstorage() {
  mkdir -p build &&
  cd build &&
  rm -rf build-tools && mkdir build-tools && cd build-tools && CXXFLAGS="" CFLAGS="" cmake ../../tools/ && make && cd .. &&
  CXXFLAGS=$CXXFLAGS CFLAGS=$CFLAGS emcmake cmake .. \
    -DCMAKE_FIND_ROOT_PATH=$INSTALL_PATH \
    -DCMAKE_INSTALL_PREFIX=$INSTALL_PATH \
    -DCMAKE_CROSSCOMPILING=1 \
    -DBUILD_TESTING=0 \
    -Dcurl_LIBRARY=NOTFOUND \
    -DBUILD_SHARED_LIBS=0 &&
  run_make
}

install_run() {
  BASE_DIRECTORY=$PWD
  fetch_$1 $2
  if [[ ! -f .done ]]; then
    BUILD_DIRECTORY=$PWD
    install_$1 $2
    if [[ $? -eq 0 ]]; then
      cd $BUILD_DIRECTORY
      touch .done
    else
      echo "Failed to build $1"
      exit 1
    fi
  fi
  cd $BASE_DIRECTORY
}

install() {
  uppercase=`echo $1 | awk '{print toupper($0)}'`
  name=${uppercase}_INSTALL
  if [[ $INSTALL_LISTED -eq 1 ]]; then
    if [[ ${!name} -eq 1 ]]; then
      install_run $1 $2
    fi
  else
    if [[ "x${!name}" != "x0" ]]; then
      install_run $1 $2
    fi
  fi
}

INSTALL_LISTED=0

for i in $@; do
  if [[ "$i" == *without-* ]]; then
    component=${i##"--without-"}
    uppercase_component=`echo $component | awk '{print toupper($0)}'`
    declare "${uppercase_component}_INSTALL"="0"
  fi

  if [[ "$i" == *with-* ]]; then
    component=${i##"--with-"}
    uppercase_component=`echo $component | awk '{print toupper($0)}'`
    INSTALL_LISTED=1
    declare "${uppercase_component}_INSTALL"="1"
  fi
done

mkdir tarballs -p
cd tarballs

install "jsoncpp" 1.9.3
install "tinyxml2" 6.0.0
install "cryptopp" 7.0.0
install "sqlite" 3240000
install "openssl" 1.1.1b
install "cares" 1.15.0
install "curl" 7.57.0
install "megasdk" 3.5.2
install "libcloudstorage" master
